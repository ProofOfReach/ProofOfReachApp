Error Handling Best Practices Specification for Nostr Ad Marketplace
This specification defines a comprehensive approach to error handling across the entire application, ensuring consistency, maintainability, and improved debugging capabilities.

1. Error Classification
1.1 Error Types
Errors should be classified into the following categories:

Operational Errors: External errors that occur during normal operation (network failures, database errors, etc.)
Programmer Errors: Bugs or implementation issues (null references, type errors, etc.)
User Input Errors: Invalid data provided by users
Authorization Errors: Permission or authentication issues
Resource Errors: Unavailable resources or timeouts
Business Logic Errors: Errors related to business rules
1.2 Error Severity Levels
Each error should have an associated severity level:

Critical: System failure requiring immediate attention
Error: Functionality broken but system still operational
Warning: Potential issues that don't break functionality
Info: Informational messages about errors that were handled
2. Error Structure
2.1 Standard Error Object
All errors should include:

interface ErrorContext {
  // Error metadata
  component: string;         // Component/module where error occurred
  timestamp: string;         // ISO format timestamp
  correlationId?: string;    // Request ID for tracing
  
  // Error details
  message: string;           // Human-readable error message
  code?: string;             // Error code for categorization
  originalError?: unknown;   // Original error object (for debugging)
  
  // Context information
  data?: Record<string, unknown>; // Relevant state/parameters
  userFacing: boolean;       // Should this be shown to users?
  
  // Recovery information
  recoverable: boolean;      // Can the system recover automatically?
  retryable: boolean;        // Can the operation be retried?
  suggestedAction?: string;  // Action the user could take
}
2.2 User-Facing Error Messages
User-facing error messages should:

Be clear and concise
Not expose implementation details
Provide actionable guidance when possible
Use consistent terminology
3. Error Handling Service
3.1 Core Service Design
class ErrorHandlingService {
  // Capture and process errors
  handleError(error: unknown, context: Partial<ErrorContext>): void;
  
  // Specialized handlers for different error types
  handleOperationalError(error: Error, context: Partial<ErrorContext>): void;
  handleProgrammerError(error: Error, context: Partial<ErrorContext>): void;
  handleAuthorizationError(error: Error, context: Partial<ErrorContext>): void;
  
  // Error creation helpers
  createError(message: string, context: Partial<ErrorContext>): AppError;
  createValidationError(message: string, invalidFields: string[]): ValidationError;
  
  // Utility methods
  isRecoverable(error: unknown): boolean;
  formatErrorForLogging(error: unknown, context: Partial<ErrorContext>): string;
  formatErrorForUser(error: unknown): string;
}
3.2 Implementation Requirements
Singleton pattern for global access
Thread-safe operations
Configurable log levels
Environment-aware behavior (dev vs production)
4. Error Handling Patterns
4.1 Frontend Error Handling
React Components:

Use error boundaries for UI component isolation
Implement consistent loading/error states
API Requests:

Centralize request error handling in API client
Standardize error response parsing
Form Validation:

Consistent validation error formatting
Field-level and form-level error handling
4.2 Backend Error Handling
API Endpoints:

Consistent error response structure
Appropriate HTTP status codes
Sanitize error details in production
Database Operations:

Specific error handling for database errors
Transaction management with proper rollbacks
External Services:

Timeout handling
Retry mechanisms with exponential backoff
Circuit breakers for failing services
5. Logging Strategy
5.1 Logging Requirements
Structured Logging:

JSON format for machine parsing
Consistent field names across all logs
Context Preservation:

Include request IDs for tracing requests across systems
Include user context when available (without PII)
Log Levels:

ERROR: Unexpected errors
WARN: Potential issues
INFO: Major operations
DEBUG: Detailed debugging (dev only)
5.2 Log Sanitization
Remove sensitive data (passwords, tokens, PII)
Truncate large payloads
Normalize unpredictable data patterns
6. Error Recovery Strategies
6.1 Automatic Recovery
Retries:

Idempotent operations should implement retries
Use exponential backoff with jitter
Set maximum retry attempts
Graceful Degradation:

Fallback to cached data when appropriate
Disable non-critical features when dependencies fail
6.2 Manual Recovery
User Intervention:
Clear error messages with recovery actions
Provide refresh/retry options
Report error option with diagnostic info
7. Testing Error Handling
7.1 Unit Testing
Test both success and failure paths
Mock failures of all dependencies
Verify correct error classification and handling
7.2 Integration Testing
Test error propagation across system boundaries
Verify error logging and monitoring
Test recovery mechanisms
8. Error Monitoring
8.1 Runtime Error Tracking
Aggregate similar errors
Track error frequencies and patterns
Set up alerts for critical errors
8.2 Error Analytics
Identify most frequent errors
Track error resolution times
Measure impact on user experience
9. Implementation Guidelines
9.1 Gradual Adoption Strategy
Create core error handling utilities first
Update critical paths and error-prone components
Gradually refactor other components
Add centralized monitoring
9.2 Documentation Requirements
Document error codes and meanings
Provide examples of proper error handling
Include troubleshooting guide for common errors
10. Example Implementation
Here's an example implementation of the central error handling service:

// src/lib/errorHandling.ts
import { logger } from '@/lib/logger';
export enum ErrorSeverity {
  CRITICAL = 'CRITICAL',
  ERROR = 'ERROR',
  WARNING = 'WARNING',
  INFO = 'INFO'
}
export enum ErrorCategory {
  OPERATIONAL = 'OPERATIONAL',
  PROGRAMMER = 'PROGRAMMER',
  USER_INPUT = 'USER_INPUT',
  AUTHORIZATION = 'AUTHORIZATION',
  RESOURCE = 'RESOURCE',
  BUSINESS = 'BUSINESS'
}
export interface ErrorContext {
  component: string;
  timestamp: string;
  correlationId?: string;
  message: string;
  code?: string;
  originalError?: unknown;
  data?: Record<string, unknown>;
  userFacing: boolean;
  recoverable: boolean;
  retryable: boolean;
  suggestedAction?: string;
  severity: ErrorSeverity;
  category: ErrorCategory;
}
export class ErrorService {
  private static instance: ErrorService;
  
  private constructor() {}
  
  public static getInstance(): ErrorService {
    if (!ErrorService.instance) {
      ErrorService.instance = new ErrorService();
    }
    return ErrorService.instance;
  }
  
  public handleError(error: unknown, contextData: Partial<ErrorContext> = {}): void {
    const context = this.buildErrorContext(error, contextData);
    
    // Log the error with appropriate level
    this.logError(context);
    
    // Perform additional actions based on error type
    if (context.category === ErrorCategory.PROGRAMMER && context.severity === ErrorSeverity.CRITICAL) {
      this.reportFatalError(context);
    }
    
    // Track error for analytics
    this.trackError(context);
  }
  
  private buildErrorContext(error: unknown, contextData: Partial<ErrorContext>): ErrorContext {
    const isErrorObject = error instanceof Error;
    
    return {
      component: contextData.component || 'unknown',
      timestamp: new Date().toISOString(),
      correlationId: contextData.correlationId,
      message: contextData.message || (isErrorObject ? error.message : String(error)),
      code: contextData.code,
      originalError: error,
      data: contextData.data || {},
      userFacing: contextData.userFacing ?? false,
      recoverable: contextData.recoverable ?? true,
      retryable: contextData.retryable ?? false,
      suggestedAction: contextData.suggestedAction,
      severity: contextData.severity || ErrorSeverity.ERROR,
      category: contextData.category || ErrorCategory.OPERATIONAL
    };
  }
  
  private logError(context: ErrorContext): void {
    const logData = {
      ...context,
      originalError: context.originalError instanceof Error 
        ? { 
            message: context.originalError.message,
            stack: context.originalError.stack,
            name: context.originalError.name
          }
        : context.originalError
    };
    
    switch (context.severity) {
      case ErrorSeverity.CRITICAL:
      case ErrorSeverity.ERROR:
        logger.error(`[${context.component}] ${context.message}`, logData);
        break;
      case ErrorSeverity.WARNING:
        logger.warn(`[${context.component}] ${context.message}`, logData);
        break;
      case ErrorSeverity.INFO:
        logger.info(`[${context.component}] ${context.message}`, logData);
        break;
    }
  }
  
  private reportFatalError(context: ErrorContext): void {
    // In a real app, this might send to an error reporting service
    console.error('FATAL ERROR REPORTED:', context);
  }
  
  private trackError(context: ErrorContext): void {
    // In a real app, this might update error metrics
    if (typeof window !== 'undefined' && window.__errorMetrics) {
      window.__errorMetrics.trackError(context.code || 'unknown', {
        component: context.component,
        severity: context.severity
      });
    }
  }
  
  public formatErrorForUser(error: unknown, defaultMessage = 'An unexpected error occurred'): string {
    if (error instanceof Error) {
      // In production, we might want to use generic messages
      return process.env.NODE_ENV === 'production' 
        ? defaultMessage
        : error.message;
    }
    return defaultMessage;
  }
  
  public isOperationalError(error: unknown): boolean {
    // Logic to determine if this is an operational error
    // Operational errors are expected errors that should be handled
    return error instanceof Error && 
           (error.name === 'NetworkError' || 
            error.name === 'TimeoutError' ||
            error.name === 'ValidationError');
  }
}
// Export singleton instance
export const errorService = ErrorService.getInstance();
// Helper functions for common use cases
export function handleApiError(error: unknown, component: string): void {
  errorService.handleError(error, {
    component,
    category: ErrorCategory.OPERATIONAL,
    userFacing: true,
    recoverable: true,
    retryable: true,
    suggestedAction: 'Please try again later or contact support if the problem persists.'
  });
}
export function throwValidationError(message: string, invalidFields: string[]): never {
  const error = new Error(message);
  error.name = 'ValidationError';
  (error as any).invalidFields = invalidFields;
  
  throw error;
}
By implementing this error handling specification, the application will gain consistent error handling, better debugging capabilities, and improved user experience.